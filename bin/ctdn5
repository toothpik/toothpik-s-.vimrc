#!/usr/bin/python
#  feed this script a count and a to-date, it will compute the
#  from-date and count down from it to the to-date
#  input date format:  YYYY-M-D  (M and D do not need the leading zero)
#  an optional 3rd argument will reformat the date output

from datetime import date, timedelta
from time import strptime
from sys import argv, exit

def usage():
    print " ctdn5 requires a count and a to-date on the commandline"
    print " in order to count down [count] days to the to-date"
    print " on sysout"
    print " the date must be in YYYY-M-D or YYYY-mmm-d format"

def ctr_n_to_date(arglist):
   
    day = timedelta(days=1)          #  date iterator
    c = int(arglist[1])              #  count
    try:
        td_ts = strptime(arglist[2], "%Y-%m-%d")  #  to-date time struct
    except ValueError:
        try:
            td_ts = strptime(arglist[2], "%Y-%b-%d")
        except ValueError:
            usage()
            exit(2)
    
    std = date(td_ts.tm_year,        #  simple to-date
               td_ts.tm_mon, 
               td_ts.tm_mday)
    
    cat = timedelta(days=c)          #  count as timedelta
    
    sd = std - cat                   #  start-date

    if len(arglist) < 4:             #  mcdl passes in a format string
        outf = "%b %_d  %a"          #  run from the command-line may not
    else:
        outf = arglist[3]

    if c > 365:
        outf = "%Y " + outf

    if c > 999:
        fivedig = True
    elif c > 99:
        fourdig = True
        fivedig = False
    else:
        fourdig = False
        fivedig = False

    while c > -1:
        if fivedig:
            print "%5d)  %s" % (c, sd.strftime(outf))
        elif fourdig:
            print "%4d)  %s" % (c, sd.strftime(outf))
        else:
            print "%3d)  %s" % (c, sd.strftime(outf))
        c -= 1
        sd += day

if __name__ == '__main__':

    if len(argv) < 3:
        usage()
        exit(1)
    else:
        ctr_n_to_date(argv)
